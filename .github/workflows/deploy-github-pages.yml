name: Deploy to GitHub Pages

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci --legacy-peer-deps || npm install --legacy-peer-deps
        
    - name: Run linting (continue on error)
      run: |
        npm run lint || echo "Linting failed but continuing..."
      continue-on-error: true
      
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        
    - name: Copy essential files
      run: |
        # Criar diretório se não existir
        mkdir -p dist
        
        # Copiar arquivos essenciais se existirem
        [ -f deploy/_headers ] && cp deploy/_headers dist/ || echo "_headers not found"
        [ -f deploy/_redirects ] && cp deploy/_redirects dist/ || echo "_redirects not found"
        [ -f deploy/robots.txt ] && cp deploy/robots.txt dist/ || echo "robots.txt not found"
        [ -f deploy/sitemap.xml ] && cp deploy/sitemap.xml dist/ || echo "sitemap.xml not found"
        [ -f deploy/manifest.json ] && cp deploy/manifest.json dist/ || echo "manifest.json not found"
        
        # Copiar do public se não existir no deploy
        [ ! -f dist/_redirects ] && [ -f public/_redirects ] && cp public/_redirects dist/ || echo "No _redirects found"
        [ ! -f dist/robots.txt ] && [ -f public/robots.txt ] && cp public/robots.txt dist/ || echo "No robots.txt found"
        [ ! -f dist/sitemap.xml ] && [ -f public/sitemap.xml ] && cp public/sitemap.xml dist/ || echo "No sitemap.xml found"
        [ ! -f dist/manifest.json ] && [ -f public/manifest.json ] && cp public/manifest.json dist/ || echo "No manifest.json found"
        
    - name: Verify critical files
      run: |
        if [ ! -f dist/index.html ]; then
          echo "❌ Critical file missing: index.html"
          exit 1
        fi
        echo "✅ Critical files verified"
        
    - name: Build analysis
      run: |
        echo "📊 Build Analysis:"
        echo "=================="
        echo "📁 Dist directory contents:"
        ls -la dist/ || echo "Dist directory not found"
        echo ""
        echo "📏 Dist directory size:"
        du -sh dist/ || echo "Cannot calculate size"
        echo ""
        echo "🔍 Large files (>1MB):"
        find dist/ -type f -size +1M -exec ls -lh {} \; 2>/dev/null || echo "No large files found"
        
    - name: Setup Pages
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: actions/upload-pages-artifact@v3
      with:
        path: './dist'
        
    - name: Generate deployment report
      run: |
        echo "# 📋 Deployment Report" > deployment-report.md
        echo "**Date:** $(date)" >> deployment-report.md
        echo "**Commit:** ${{ github.sha }}" >> deployment-report.md
        echo "**Branch:** ${{ github.ref_name }}" >> deployment-report.md
        echo "**Node Version:** ${{ matrix.node-version }}" >> deployment-report.md
        echo "" >> deployment-report.md
        echo "## 📁 Build Contents" >> deployment-report.md
        echo "\`\`\`" >> deployment-report.md
        ls -la dist/ >> deployment-report.md 2>/dev/null || echo "Dist directory not found" >> deployment-report.md
        echo "\`\`\`" >> deployment-report.md
        echo "" >> deployment-report.md
        echo "## 📏 Size Analysis" >> deployment-report.md
        echo "**Total Size:** $(du -sh dist/ 2>/dev/null | cut -f1 || echo 'Unknown')" >> deployment-report.md
        
    - name: Upload deployment report
      uses: actions/upload-artifact@v4
      with:
        name: deployment-report-${{ matrix.node-version }}
        path: deployment-report.md

  deploy:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: Deployment success notification
      run: |
        echo "🚀 Deployment successful!"
        echo "📍 URL: ${{ steps.deployment.outputs.page_url }}"
        echo "✅ DialogaMente está agora disponível no GitHub Pages!"